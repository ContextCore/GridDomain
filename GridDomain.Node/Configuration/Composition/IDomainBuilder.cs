using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using GridDomain.Common;
using GridDomain.CQRS;
using GridDomain.CQRS.Messaging;
using GridDomain.EventSourcing;
using GridDomain.EventSourcing.Sagas.InstanceSagas;
using Serilog;

namespace GridDomain.Node.Configuration.Composition
{
    public interface IDomainConfiguration
    {
        void Register(IDomainBuilder builder);
    }

    public interface IDomainBuilder
    {
        void RegisterSaga<TState, TProcess>(ISagaDependencyFactory<TProcess, TState> factory) where TProcess : Process<TState>
                                                                                              where TState : class, ISagaState;
        void RegisterAggregate<TAggregate>(IAggregateDependencyFactory<TAggregate> factory) where TAggregate : Aggregate;
       
        void RegisterHandler<TMessage, THandler>(IMessageHandlerFactory<TMessage, THandler> factory) where THandler : IHandler<TMessage>;
        void RegisterHandler<TMessage, THandler>(IMessageHandlerWithMetadataFactory<TMessage, THandler> factory) where THandler : IHandlerWithMetadata<TMessage>;
    }

    class MessageHandlerFactory<TMessage, THandler> where THandler : IHandler<TMessage>
                                                    where TMessage : class, IHaveSagaId, IHaveId
    {
        private readonly Func<IMessageProcessContext, THandler> _creator;
        private readonly Expression<Func<TMessage, Guid>> _correlationPropertyExpression;

        protected MessageHandlerFactory(Func<IMessageProcessContext, THandler> creator, Expression<Func<TMessage, Guid>> correlationPropertyExpression)
        {
            _creator = creator;
            _correlationPropertyExpression = correlationPropertyExpression;
        }

        public THandler Create(IMessageProcessContext context)
        {
            return _creator(context);
        }

        public IMessageRouteMap CreateRouteMap()
        {
            return MessageRouteMap.New<TMessage, THandler>(_correlationPropertyExpression,$"autogenerated map for {typeof(TMessage).Name} to {typeof(THandler).Name}");
        }
    }



    class DefaultMessageHandlerFactory<TMessage, THandler> : MessageHandlerFactory<TMessage, THandler>,
                                                             IMessageHandlerFactory<TMessage, THandler> where THandler : IHandler<TMessage>
                                                                                                        where TMessage : class, IHaveSagaId, IHaveId
    {
        public DefaultMessageHandlerFactory(Func<IMessageProcessContext, THandler> creator, Expression<Func<TMessage, Guid>> expression) : base(creator, expression)
        {

        }
    }
    class DefaultMessageWithMetadataHandlerFactory<TMessage, THandler> : MessageHandlerFactory<TMessage, THandler>,
            IMessageHandlerWithMetadataFactory<TMessage, THandler> where THandler : IHandlerWithMetadata<TMessage>
                                                                   where TMessage : class, IHaveSagaId, IHaveId
    {
        public DefaultMessageWithMetadataHandlerFactory(Func<IMessageProcessContext, THandler> creator, Expression<Func<TMessage, Guid>> expression) : base(creator, expression) {
            
        }
    }

    public static class DomainBuilderExtensions
    {
        public static void Register(this IDomainBuilder builder, params IDomainConfiguration[] maps)
        {
            foreach(var m in maps)
                m.Register(builder);
        }
        public static void Register(this IDomainBuilder builder, IEnumerable<IDomainConfiguration> maps)
        {
            Register(builder, maps.ToArray());
        }

        public static void RegisterHandler<TMessage, THandler>(this IDomainBuilder builder) where THandler : IHandler<TMessage>, new()
                                                                                            where TMessage : DomainEvent
        {
            RegisterHandler<TMessage, THandler>(builder, c => new THandler(), e => e.SourceId);
        }

        public static void RegisterMetadataHandler<TMessage, THandler>(this IDomainBuilder builder) where THandler : IHandlerWithMetadata<TMessage>, new()
            where TMessage : DomainEvent
        {
            RegisterMetadataHandler<TMessage, THandler>(builder, c => new THandler(), e => e.SourceId);
        }

        public static void RegisterHandler<TMessage, THandler>(this IDomainBuilder builder, Func<IMessageProcessContext, THandler> producer, Expression<Func<TMessage, Guid>> propertyExp) where THandler : IHandler<TMessage>
                                                                                                                                                                                           where TMessage : class, IHaveSagaId, IHaveId
        {
            builder.RegisterHandler(new DefaultMessageHandlerFactory<TMessage, THandler>(producer,propertyExp));
        }

        public static void RegisterMetadataHandler<TMessage, THandler>(this IDomainBuilder builder, Func<IMessageProcessContext, THandler> producer, Expression<Func<TMessage, Guid>> propertyExp) 
            where THandler : IHandlerWithMetadata<TMessage>
            where TMessage : class, IHaveSagaId, IHaveId
        {
            builder.RegisterHandler(new DefaultMessageWithMetadataHandlerFactory<TMessage, THandler>(producer, propertyExp));
        }
    }

    public interface IMessageProcessContext
    {
        IPublisher Publisher { get; }
        ILogger Log { get; }
    }

    public interface IMessageHandlerFactory<TMessage, THandler>: IRouteMapFactory where THandler : IHandler<TMessage>
    {
        THandler Create(IMessageProcessContext context);
    }

    public interface IMessageHandlerWithMetadataFactory<TMessage, THandler>: IRouteMapFactory where THandler : IHandlerWithMetadata<TMessage>
    {
        THandler Create(IMessageProcessContext context);
    }
}