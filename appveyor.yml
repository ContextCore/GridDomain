version: 2.2.{build}
branches:
  only:
  - master
  - /hotfix.*/
  - 2.0.0
image: Visual Studio 2017
configuration: Release
assembly_info:
  patch: true
  file: '**\AssemblyInfo.*'
  assembly_version: '{version}'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}-alfa'
dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '{version}-alfa'
  package_version: '{version}-alfa'
  assembly_version: '{version}'
  file_version: '{version}'
  informational_version: '{version}-alfa'
environment:
  WriteModel: Server=(local);Database=master;User ID=sa;Password=Password12!
  ReadModel: Server=(local);Database=AutoTestRead;User ID=sa;Password=Password12!
  APPVEYOR_RDP_PASSWORD:
    secure: wdSMAMdS/O0zMUdCuf87Rw==
  Quartz: Server=(local);Database=Quartz;User ID=sa;Password=Password12!
services: mssql2016
cache: packages  -> **\packages.config
build_script:
- ps: >-
    nuget sources add -Name pro_nbench -Source "https://ci.appveyor.com/nuget/pro-nbench-xunit"

    nuget sources add -Name autoFixture_Night -Source "https://www.myget.org/F/autofixture/api/v3/index.json"


    nuget update -self

    nuget restore -verbosity quiet GridDomain.sln


    msbuild GridDomain.sln /p:Configuration=Release /v:Minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" /p:GeneratePackageOnBuild=true /p:IncludeSymbols=true
test_script:
- ps: >-
    [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | Out-Null	
    
    [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.SqlWmiManagement") | Out-Null	
    
    $serverName = $env:COMPUTERNAME	
    
    $instanceName = 'SQL2016'
    
    $smo = 'Microsoft.SqlServer.Management.Smo.'	
    
    $wmi = new-object ($smo + 'Wmi.ManagedComputer')	
    
    # Set Alias	
    New-Item HKLM:\\SOFTWARE\\Microsoft\\MSSQLServer\\Client -Name ConnectTo | Out-Null	
    
    Set-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\MSSQLServer\\Client\\ConnectTo -Name '(local)' -Value "DBMSSOCN,$serverName\\$instanceName" | Out-Null	
    	
    # Start services	
    Set-Service SQLBrowser -StartupType Manual	
    
    Start-Service SQLBrowser	
    
    Start-Service "MSSQL`$$instanceName"	
    	
    sqlcmd -S "(local)" -U "sa" -P "Password12!" -Q "Use [master]; CREATE DATABASE [AutoTestRead];"	
    	
    sqlcmd -S "(local)" -U "sa" -P "Password12!" -i "GridDomain.Node\\Persistence.sql"	
    	
    sqlcmd -S "(local)" -U "sa" -P "Password12!" -i "GridDomain.Node\\Human_schema.sql"	
    	
    sqlcmd -S "(local)" -U "sa" -P "Password12!" -i "GridDomain.Scheduling\\CreateDatabase.sql"	
    
    #to ensure table is created. Weird, but many times acceptance tests was failing on first access to write db via EF repository	
    sqlcmd -S "(local)" -d AutoTestWrite -U "sa" -P "Password12!" -Q "SELECT * FROM [Snapshots]" 	
    	
    	
    function PushTestLogs($projectName)	
    {	
    $name=$projectName+"_Logs_$env:APPVEYOR_BUILD_VERSION.zip"	
    $logpath = "C:\\projects\\griddomain\\GridDomain.Tests.$projectName\\bin\\Release\	
    etcoreapp2.0\\Logs\\*"	
    7z a $name "$logpath"	
    Push-AppveyorArtifact $name	
    }	
    	
    function OpenRdp()	
    {	
    $blockRdp = $true;	
    iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))	
    }	
    	
    	
    cd C:\\projects\\griddomain\\GridDomain.Tests.Unit	
    	
    #OpenRdp	
    	
    dotnet xunit -fxversion 2.0.3 -framework netcoreapp2.0  -noshadow -configuration Release -internaldiagnostics  -usemsbuild -nobuild	
    	
    	
    if($LastExitCode -ne 0){	
    PushTestLogs -projectName "Unit"	
    $host.SetShouldExit($LastExitCode)	
    }	
    	
    cd C:\\projects\\griddomain\\GridDomain.Tests.Acceptance	
    	
    dotnet xunit -fxversion 2.0.3 -framework netcoreapp2.0 -noshadow -configuration Release -internaldiagnostics	
    	
    if($LastExitCode -ne 0){	
    PushTestLogs -projectName "Acceptance"	
    $host.SetShouldExit($LastExitCode)	
    } 	
    exit 1	
    cd C:\\projects\\griddomain\\GridDomain.Tests.Stress	
    	
    dotnet xunit -fxversion 2.0.3 -framework netcoreapp2.0 -noshadow -configuration Release -internaldiagnostics -xml C:\\projects\\griddomain\\stress_results.xml 	
    	
    if($LastExitCode -ne 0){	
    PushTestLogs -projectName "Stress"	
    $host.SetShouldExit($LastExitCode)	
    } 	
    	
    Get-Content C:\\projects\\griddomain\\stress_results.xml
artifacts:
- path: '**\GridDomain.*.nupkg'
  name: Packages
deploy:
- provider: NuGet
  server: https://www.myget.org/F/griddomain/api/v2/package
  api_key:
    secure: jF3VOqctqN9MK8lLs+Vlfs2Trv4Gs9BLV/R4HX6ZtC1JQaoezDssjjtP/28Ptkd7
  skip_symbols: false
  symbol_server: https://www.myget.org/F/griddomain/symbols/api/v2/package