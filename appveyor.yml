version: 1.0.{build}
#stack: mssql
branches:
  only:
  - develop
image: Ubuntu

install:
- ps: |
    $tag_version = git describe --tags --abbrev=0
    $tag_version -match "^(?<major>\d+)(\.(?<minor>\d+))?(\.(?<patch>\d+))?(\-(?<pre>[0-9A-Za-z\-\.]+))?(\+(?<build>[0-9A-Za-z\-\.]+))?$" | Out-Null
    echo "Got tag $tag_version from git"

    $major = [int]$matches['major']
    $minor = [int]$matches['minor']
    $patch = [int]$matches['patch']
    $pre = [string]$matches['pre']

    $build_number = $env:APPVEYOR_BUILD_NUMBER
    echo "Got build number $build_number from appveyor"

    $fullVersion = "$tag_version+$build_number"

    if($pre){
      $fullVersion = "$tag_version-$build_number"
    }


    $env:APP_VERSION = "$major.$minor.$patch"

    echo "Set APP_VERSION environment variable to $env:APP_VERSION"

  
    echo "Full version is $fullVersion"

    Update-AppveyorBuild -Version $fullVersion
dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '{version}'
  package_version: '{version}'
  assembly_version: '$(app_version)'
  file_version: '$(app_version).{build}'
  informational_version: '$(app_version)'
environment:
  APPVEYOR_SSH_KEY: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBI7S8beSMm0ePKq3CM3r4a0W/7OU+cwb8ZPyMoeeTtz0q0sPHoO1psD1jPh/2+v8UKToLdDJxhtxbkNTv8WeVME=
  APPVEYOR_SSH_BLOCK: true
  WriteModel: Server=localhost;Database=master;User ID=sa;Password=Password12!
  ReadModel: Server=localhost;Database=AutoTestRead;User ID=sa;Password=Password12!
  Quartz: Server=localhost;Database=Quartz;User ID=sa;Password=Password12!
services: mssql
build_script:
- sh: |
    #set -e 
    
    #curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
    
    printenv APPVEYOR_BUILD_VERSION
    printenv APP_VERSION
    
    dotnet build GridDomain.sln -c Release -v Minimal /l:"/opt/appveyor/build-agent/AppVeyor.MSBuildLogger.dll"
    dotnet pack GridDomain.sln -c Release -v Minimal --include-symbols --include-source --no-build /l:"/opt/appveyor/build-agent/AppVeyor.MSBuildLogger.dll"
test_script:
- sh: |
    
    runTests()
    {
      testsName=$1
      testsFolder=$2
      cd $testsFolder
      dotnet test --no-build --configuration Release --no-restore --logger trx > TestsOutput.txt
      TestResult=$?
      path=~/projects/griddomain-mdlr7/"$testsFolder"/bin/Release/netcoreapp2.0/Logs/*
      echo $path

      zip -j -r ./"$testsName"Output.zip ./TestResults/*
      zip -j -r ./"$testsName"Logs.zip ./bin/Release/netcoreapp2.0/Logs/*

      if [ $TestResult -ne 0 ];then
         echo should exiting...
            #exit #$TestResult
      fi
      echo continue 
      cd ..
    }

    #ls 
    sqlcmd -S localhost -U SA -P 'Password12!' -Q 'select @@VERSION'

    sqlcmd -S localhost -U SA -P "Password12!" -Q "Use [master]; CREATE DATABASE [AutoTestRead];"

    sqlcmd -S localhost -U SA -P "Password12!" -i GridDomain.Node.Persistence.Sql/Persistence.sql

    sqlcmd -S localhost -U SA -P "Password12!" -i GridDomain.Node.Persistence.Sql/Human_schema.sql

    #mkdir ~/QuartzMemoryOptimizedData

    sqlcmd -S localhost -U SA -P "Password12!" -i GridDomain.Scheduling/CreateDatabase.sql

    runTests UnitTests GridDomain.Tests.Unit
    runTests ClusterUnitTests GridDomain.Tests.Unit.Cluster
    runTests AcceptanceTests GridDomain.Tests.Acceptance

    #curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -

    runTests ClusterAcceptanceTests GridDomain.Tests.Acceptance.Cluster


artifacts:
- path: '**\GridDomain.*.nupkg'
  name: Packages
- path: '**\*.zip'
  name: TestResults
deploy:
  - provider: Environment
    name: MyGet development feed